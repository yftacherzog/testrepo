apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/yftacherzog/testrepo?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/cancel-in-progress: "true"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch
      == "main"
    pipelinesascode.tekton.dev/task: >-
      [
      tasks/monolithic-build-container-task.yaml,
      tasks/monolithic-build-image-index-task.yaml
      ]
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: my-test-component
    appstudio.openshift.io/component: testrepo-monolithic
    pipelines.appstudio.openshift.io/type: build
  name: testrepo-monolithic-on-pull-request
  namespace: user-ns2
spec:
  params:
  - name: git-url
    value: '{{source_url}}'
  - name: revision
    value: '{{revision}}'
  - name: output-image
    value: quay.io/yftacherzog-konflux/user-ns2/testrepo-monolithic:on-pr-{{revision}}
  - name: image-expires-after
    value: 5d
  - name: dockerfile
    value: Dockerfile
  pipelineSpec:
    description: |
      Monolithic pipeline test for building container images with improved performance.

      This pipeline consolidates multiple tasks into two monolithic tasks:
      - monolithic-build-container: Combines init, git-clone, prefetch-dependencies, and buildah
      - monolithic-build-image-index: Enhanced build-image-index functionality

      Benefits:
      - Reduced task overhead and improved performance
      - Less pressure on etcd (no inline bash scripts)
      - Better maintainability with Go-based implementation
      - Preserved compatibility with existing parameters
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Fully Qualified Output Image
      name: output-image
      type: string
    - default: .
      description: Path to the source code of an application's component from where
        to build image.
      name: path-context
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter
        path-context
      name: dockerfile
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: "false"
      description: Execute the build with network isolation
      name: hermetic
      type: string
    - default: ""
      description: Build dependencies to be prefetched
      name: prefetch-input
      type: string
    - default: ""
      description: Image tag expiration time, time values could be something like
        1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
      type: string
    - default: "false"
      description: Add built image into an OCI image index
      name: build-image-index
      type: string
    - default: ""
      description: Space-separated --build-arg values ("arg=value" strings) for buildah
      name: build-args
      type: string
    - default: ""
      description: Path to a file with build arguments for buildah
      name: build-args-file
      type: string
    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.build-container.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.build-container.results.commit)
    tasks:
    # Monolithic build-container task (consolidates init + git-clone + prefetch + buildah)
    - name: build-container
      params:
      # Git parameters
      - name: git-url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)

      # Image parameters
      - name: IMAGE
        value: $(params.output-image)
      - name: DOCKERFILE
        value: $(params.dockerfile)
      - name: CONTEXT
        value: $(params.path-context)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)

      # Hermetic build parameters
      - name: HERMETIC
        value: $(params.hermetic)
      - name: PREFETCH_INPUT
        value: $(params.prefetch-input)

      # Build parameters
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.image-expires-after)
      - name: BUILD_ARGS
        value: "$(params.build-args)"
      - name: BUILD_ARGS_FILE
        value: $(params.build-args-file)

      taskRef:
        name: monolithic-build-container
        kind: Task
      workspaces:
      - name: source
        workspace: workspace
      - name: git-basic-auth
        workspace: git-auth
      - name: netrc
        workspace: netrc

    # Monolithic build-image-index task
    - name: build-image-index
      params:
      - name: IMAGE
        value: $(params.output-image)
      - name: COMMIT_SHA
        value: $(tasks.build-container.results.commit)
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.image-expires-after)
      - name: ALWAYS_BUILD_INDEX
        value: $(params.build-image-index)
      - name: IMAGES
        value: "$(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)"
      runAfter:
      - build-container
      taskRef:
        name: monolithic-build-image-index
        kind: Task

    # Security and quality checks can be added here
    # They would run after build-image-index and use its results
    # This shows how the monolithic approach still allows for modular security scanning

    workspaces:
    - name: workspace
    - name: git-auth
      optional: true
    - name: netrc
      optional: true
  taskRunTemplate:
    serviceAccountName: build-pipeline-testrepo
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      metadata:
        creationTimestamp:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
  - name: netrc
    emptyDir: {}
status: {}
